{"version":3,"file":"static/js/581.ac833f23.chunk.js","mappings":"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","sources":["app/components/challengeManagement/Allchallenge.js"],"sourcesContent":["import axios from 'axios'\nimport React, { useEffect, useState } from 'react'\nimport { Link } from 'react-router-dom';\nimport ReactPaginate from \"react-paginate\";\nconst $ = require(\"jquery\")\n$.Datatable = require(\"datatables.net\");\n\n\n\nexport default function Allchallenge() {\n    const beckendLocalApiUrl = process.env.REACT_APP_BACKEND_LOCAL_API;\n    const beckendLiveApiUrl = process.env.REACT_APP_BACKEND_LIVE_API;\n    const nodeMode = process.env.NODE_ENV;\n    if (nodeMode === \"development\") {\n      var baseUrl = beckendLocalApiUrl;\n    } else {\n      baseUrl = beckendLiveApiUrl;\n    }\n\n    const [challenge, setchallenge] = useState()\n    \n    //use for pagination..\n    let [limit,setLimit] = useState(10);\n\n  const setpageLimit = (event)=>{\n    let key = event.target.value\n    setLimit(key);\n}\n    const [pageNumber, setPageNumber] = useState(0);\n    const [numberOfPages, setNumberOfPages] = useState(0);\n\n    //react paginate..\n    const handlePageClick = async (data) => {\n        let currentPage = data.selected + 1;\n        setPageNumber(currentPage);\n        // scroll to the top\n        //window.scrollTo(0, 0)\n      };\n      \n    const Allchallenge = async () => {\n        const access_token = localStorage.getItem('token')\n        const headers = {\n            Authorization: `Bearer ${access_token}`\n        }\n        axios.get(baseUrl+`admin/challange/all?page=${pageNumber}&_limit=${limit}`, { headers })\n            .then((res) => {\n                //console.log(res.data.status)\n                setchallenge(res.data.status)\n                setNumberOfPages(res.data.totalPages)\n                //$('table').dataTable();\n            })\n    }\n    \n    const dateFormat=(e)=>{\n      \n  const date = new Date(e); \nconst newDate = date.toLocaleString('default', { month: 'long',day:'numeric',hour:'numeric',hour12:true,minute:'numeric' });\nreturn newDate;\n  }\n\n    const CancelGame = async (id) => {\n        const confirm = window.confirm(\"are you sure to cancel\")\n\n        if (confirm == true) {\n            const access_token = localStorage.getItem('token')\n            const headers = {\n                Authorization: `Bearer ${access_token}`\n\n            }\n            axios.patch(baseUrl+`challange/Cancel/${id}`, { Cancelled_by: access_token }, { headers })\n                .then((res) => {\n                    Allchallenge()\n                })\n        }\n        else {\n            window.alert(\"sorry try again\")\n        }\n    }\n\n\n    useEffect(() => {\n        Allchallenge()\n    },[pageNumber,limit])\n\n    if (challenge == undefined) {\n        return null\n    }\n\n\n\n\n    return (\n        <>\n            {/* <h4 className='font-weight-bold my-3'>ALL CHALLANGES</h4> */}\n            <div className=\"row \">\n                <div className=\"col-12 grid-margin\">\n                    <div className=\"card\">\n                        <div className=\"card-body text-light\" style={{backgroundColor:\"rgba(0, 27, 11, 0.734)\"}}>\n                            <h4 className=\"card-title\">ALL CHALLANGES</h4>\n                            <select  className='form-control col-sm-1 m-1 bg-dark text-light' id='pagelimit' name='pagelimit' onChange={setpageLimit}>\n                                <option value=\"10\">Set limit</option>\n                                <option value=\"20\">20</option>\n                                <option value=\"50\">50</option>\n                                <option value=\"100\">100</option>\n                                <option value=\"500\">500</option>\n                            </select>\n                            <div className=\"table-responsive\">\n                                <table className=\"table text-light\" >\n                                    <thead>\n                                        <tr>\n                                            <th>#</th>\n                                            <th> ID</th>\n                                            <th> Creator</th>\n                                            <th> Accepter</th>\n                                            <th> Amount </th>\n                                            <th> Status </th>\n                                            <th> Game Type </th>\n                                            <th> Winner </th>\n                                            <th>Date</th>\n                                            <th> Action </th>\n                                        </tr>\n                                    </thead>\n\n                                    <tbody>\n                                        {challenge && challenge.map((game, key) => (\n                                            <tr key={game._id}>\n                                                <td>{key + 1}</td>\n                                                <td>{game._id}</td>\n                                                <td>\n                                                    <span className=\"pl-2 \">{game.Created_by?game.Created_by.Name:null}</span>\n                                                </td>\n                                                \n                                                <td>\n                                                    <span className=\"pl-2\">{game.Accepetd_By?game.Accepetd_By.Name:null}</span>\n                                                </td>\n                                                <td>{game.Game_Ammount}</td>\n                                                <td className='text-primary font-weight-bold'>{game.Status}</td>\n                                                <td>{game.Game_type}</td>\n                                                \n                                                <td>{game.Winner ? game.Winner.Name : null}</td>\n                                                <td>{dateFormat(game.createdAt).split(',')[0]} </td>\n                                                <td>\n                                                    <Link type='button' className=\"btn btn-primary mx-1\"to={`/view/${game._id}`}>View</Link>\n                                                    {/* {game.Status != \"cancelled\" && game.Status != \"completed\" && game.Status != \"conflict\" && <button type='button' className=\"btn  mx-1 btn-danger\" onClick={() => CancelGame(game._id)}>Cancel</button>} */}\n                                                </td>\n                                            </tr>\n\n\n                                        ))}\n                                    </tbody>\n                                </table>\n                            </div>\n                            \n                            <div className='mt-4'>\n                            <ReactPaginate\n                                previousLabel={\"Previous\"}\n                                nextLabel={\"Next\"}\n                                breakLabel={\"...\"}\n                                pageCount={numberOfPages}\n                                marginPagesDisplayed={2}\n                                pageRangeDisplayed={3}\n                                onPageChange={handlePageClick}\n                                containerClassName={\"pagination justify-content-center\"}\n                                pageClassName={\"page-item\"}\n                                pageLinkClassName={\"page-link\"}\n                                previousClassName={\"page-item\"}\n                                previousLinkClassName={\"page-link\"}\n                                nextClassName={\"page-item\"}\n                                nextLinkClassName={\"page-link\"}\n                                breakClassName={\"page-item\"}\n                                breakLinkClassName={\"page-link\"}\n                                activeClassName={\"active\"}\n                            />\n                            </div>\n                            \n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}\n"],"names":["Allchallenge","baseUrl","process","useState","challenge","setchallenge","limit","setLimit","pageNumber","setPageNumber","numberOfPages","setNumberOfPages","handlePageClick","data","currentPage","selected","access_token","localStorage","getItem","headers","Authorization","axios","then","res","status","totalPages","useEffect","undefined","className","style","backgroundColor","id","name","onChange","event","key","target","value","map","game","_id","Created_by","Name","Accepetd_By","Game_Ammount","Status","Game_type","Winner","e","createdAt","Date","toLocaleString","month","day","hour","hour12","minute","split","type","to","previousLabel","nextLabel","breakLabel","pageCount","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","breakClassName","breakLinkClassName","activeClassName","require","Datatable"],"sourceRoot":""}